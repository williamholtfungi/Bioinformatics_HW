if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings", force = TRUE)
#Checked that directory was in place ####
getwd()
mySequences01 <- readDNAStringSet("sequence01.fasta")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings", force = TRUE)
BiocManager::install("GenomicAlignments", force = TRUE)
library(Biostrings)
library(msa)
library(dplyr)
library(tidyverse)
library(genepop)
library(tidyr)
install.packages("seqinr")
library(seqinr)
library(ape)
install.packages("UniprotR")
install.packages("protti")
install.packages("r3dmol")
library(UniprotR)
library(protti)
library(protti)
mySequences01 <- readDNAStringSet("sequence01.fasta")
mySequences01
#3. Translate DNA sequence into AA sequence ####
aa_sequence <- translate(mySequences01)
aa_sequence
#3. Translate DNA sequence into AA sequence ####
aa_sequence <- Biostrings::translate(mySequences01)
aa_sequence
as.character(aa_sequence)
# Writing a aa sequence into a fasta file
output_file <- "amino_acid_sequence.fasta"
writeXStringSet(aa_sequence, file = output_file,
format = "fasta", width = 60)
#4. Read this file into R using the appropriate function ####
accession_numbers<- read.table("AccNumbers.txt")
#4. Read this file into R using the appropriate function ####
accession_numbers<- read.table("Accession5.txt")
#5. Sample list of accession numbers ####
accession_numbers <- c("O78681", "I3PAK4", "A0A0F7H0C5", "A0A0F7H0D2", "Q85DY2")
# Convert the list to a character string
accession_string <- paste(accession_numbers, collapse = ",")
# Print the formatted string
print(accession_string)
#6. Reading accession numbers into GetProteinGOInfo ####
AccessionNumbersGO <- GetProteinGOInfo(accession_numbers)
str(AccessionNumbersGO)
#7. Extract GO terms and their counts from AccessionNumbersGO ####
View(AccessionNumbersGO)
df <-- read.csv(AccessionNumbersGO.csv)
str(AccessionNumbersGO)
#7. Extract GO terms and their counts from AccessionNumbersGO ####
View(AccessionNumbersGO)
df <-- read.csv(AccessionNumbersGO.csv)
#PlotGoInfo(AccessionNumbersGO) #--> Did not work
go_terms <- unlist(strsplit(AccessionNumbersGO$Gene.Ontology..GO., ";"))
go_terms <- gsub("\\[.*?\\]", "", go_terms)  # Remove GO IDs from GO terms
# Create a data frame with GO terms and their counts
go_counts <- data.frame(GoTerm = go_terms, Count = rep(1, length(go_terms)))
# Summarize the counts for each GO term
go_counts <- aggregate(Count ~ GoTerm, go_counts, sum)
# Plot the GO information
barplot(go_counts$Count, names.arg = go_counts$GoTerm,
xlab = "GO Terms", ylab = "Count", main = "GO Term Distribution")
# Plot the GO information
barplot(go_counts$Count, names.arg = go_counts$GoTerm,
xlab = "GO Terms", ylab = "Count", main = "GO Term Distribution")
#10. Use GetPathology_Biotech() and Get.diseases() to find information on any diseases or pathologies associated with your gene ####
GetPathology_Biotech(accession_numbers)
#NA on all counts
Get.diseases(accession_numbers)
#NA on all counts
Get.diseases(accession_numbers)
viewtibble <- fetch_uniprot(accession_numbers)
View(viewtibble)
viewtibble <- fetch_uniprot(accession_numbers)
#10. Use GetPathology_Biotech() and Get.diseases() to find information on any diseases or pathologies associated with your gene ####
GetPathology_Biotech(accession_numbers)
#NA on all counts
Get.diseases(accession_numbers)
viewtibble <- fetch_uniprot(accession_numbers)
library(UniprotR)
library(protti)
library(UniprotR)
library(protti)
library(UniprotR)
library(protti)
library(protti)
library(r3dmol)
#12. Pull any available structural information from the Protein DataBase
fetch_pdb("1ZMR")
